import os
import db
import json
import datetime
import decimal
from web3 import Web3
import discord
from discord import message
from discord.ext import commands, tasks
from pycoingecko import CoinGeckoAPI

BOT_TOKEN = os.environ["DISCORD_BOT_TOKEN"]

# Initialize Discord client
intents = discord.Intents.all()
intents.members = True
client = commands.Bot(command_prefix='.', intents=intents, help_command=None)

# Initialize web3
INFURA_TOKEN = os.environ['WEB3_INFURA_TOKEN']
infuraURL = f'https://mainnet.infura.io/v3/{INFURA_TOKEN}'
web3 = Web3(Web3.HTTPProvider(infura_url))

cg = CoinGeckoAPI()

DAI_alert, OHM_DAI_alert, FRAX_alert, OHM_FRAX_alert = False, False, False, False

print(web3.isConnected())

def is_num(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
def get_prices():
    #retrieve OHM price from sushiswap pool
    Sushi_OHM_DAI_address = '0x34d7d7Aaf50AD4944B70B320aCB24C95fa2def7c'
    Sushi_OHM_DAI_abi = json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"_reserve0","type":"uint112"},{"internalType":"uint112","name":"_reserve1","type":"uint112"},{"internalType":"uint32","name":"_blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]')

    Sushi_OHM_DAI = web3.eth.contract(address=Sushi_OHM_DAI_address, abi=Sushi_OHM_DAI_abi)

    get_reserves = Sushi_OHM_DAI.functions.getReserves().call()
    date = datetime.datetime.fromtimestamp(get_reserves[2])
    amount0 = get_reserves[0]/1e9
    amount1 = get_reserves[1]/1e18
    OHM_price = decimal.Decimal(amount1/amount0)
    gas_price = web3.eth.gasPrice/1e9
    eth_price = cg.get_price(ids='ethereum', vs_currencies='usd')['ethereum']['usd']
    print(date)
    print(f'OHM price: {OHM_price:,.2f}')
    print(f'Gas: {gas_price:,.2f} gwei')
 
    #retrieve bond prices and it's current discount
    OHM_address = '0x383518188C0C6d7730D91b2c03a03C837814a899'
    OHM_abi = json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"previousTWAPEpochPeriod","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTWAPEpochPeriod","type":"uint256"}],"name":"TWAPEpochChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousTWAPOracle","type":"address"},{"indexed":true,"internalType":"address","name":"newTWAPOracle","type":"address"}],"name":"TWAPOracleChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newTWAPSource","type":"address"}],"name":"TWAPSourceAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"removedTWAPSource","type":"address"}],"name":"TWAPSourceRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"_burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newTWAPSourceDexPool_","type":"address"}],"name":"addTWAPSource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newTWAPEpochPeriod_","type":"uint256"}],"name":"changeTWAPEpochPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newTWAPOracle_","type":"address"}],"name":"changeTWAPOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"twapSourceToRemove_","type":"address"}],"name":"removeTWAPSource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"vault_","type":"address"}],"name":"setVault","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"twapEpochPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"twapOracle","outputs":[{"internalType":"contract ITWAPOracle","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]')

    DAI_address = '0x575409F8d77c12B05feD8B455815f0e54797381c'
    DAI_abi = json.loads('[{"inputs":[{"internalType":"address","name":"_OHM","type":"address"},{"internalType":"address","name":"_principle","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_DAO","type":"address"},{"internalType":"address","name":"_bondCalculator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"deposit","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expires","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"}],"name":"BondCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"internalPrice","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"debtRatio","type":"uint256"}],"name":"BondPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"remaining","type":"uint256"}],"name":"BondRedeemed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"initialBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"adjustment","type":"uint256"},{"indexed":false,"internalType":"bool","name":"addition","type":"bool"}],"name":"ControlVariableAdjustment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"DAO","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adjustment","outputs":[{"internalType":"bool","name":"add","type":"bool"},{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"target","type":"uint256"},{"internalType":"uint256","name":"buffer","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondCalculator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"bondInfo","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"},{"internalType":"uint256","name":"vesting","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"},{"internalType":"uint256","name":"pricePaid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPrice","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPriceInUSD","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtDecay","outputs":[{"internalType":"uint256","name":"decay_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtRatio","outputs":[{"internalType":"uint256","name":"debtRatio_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_maxPrice","type":"uint256"},{"internalType":"address","name":"_depositor","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_controlVariable","type":"uint256"},{"internalType":"uint256","name":"_vestingTerm","type":"uint256"},{"internalType":"uint256","name":"_minimumPrice","type":"uint256"},{"internalType":"uint256","name":"_maxPayout","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"uint256","name":"_maxDebt","type":"uint256"},{"internalType":"uint256","name":"_initialDebt","type":"uint256"}],"name":"initializeBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isLiquidityBond","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPayout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"payoutFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"pendingPayoutFor","outputs":[{"internalType":"uint256","name":"pendingPayout_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"percentVestedFor","outputs":[{"internalType":"uint256","name":"percentVested_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"policy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"principle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverLostToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_addition","type":"bool"},{"internalType":"uint256","name":"_increment","type":"uint256"},{"internalType":"uint256","name":"_target","type":"uint256"},{"internalType":"uint256","name":"_buffer","type":"uint256"}],"name":"setAdjustment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum OlympusBondDepository.PARAMETER","name":"_parameter","type":"uint8"},{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"setBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_staking","type":"address"},{"internalType":"bool","name":"_helper","type":"bool"}],"name":"setStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staking","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakingHelper","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"standardizedDebtRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"terms","outputs":[{"internalType":"uint256","name":"controlVariable","type":"uint256"},{"internalType":"uint256","name":"vestingTerm","type":"uint256"},{"internalType":"uint256","name":"minimumPrice","type":"uint256"},{"internalType":"uint256","name":"maxPayout","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"maxDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"useHelper","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

    OHM_DAI_address = '0x956c43998316b6a2F21f89a1539f73fB5B78c151'
    OHM_DAI_abi = json.loads('[{"inputs":[{"internalType":"address","name":"_OHM","type":"address"},{"internalType":"address","name":"_principle","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_DAO","type":"address"},{"internalType":"address","name":"_bondCalculator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"deposit","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expires","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"}],"name":"BondCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"internalPrice","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"debtRatio","type":"uint256"}],"name":"BondPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"remaining","type":"uint256"}],"name":"BondRedeemed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"initialBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"adjustment","type":"uint256"},{"indexed":false,"internalType":"bool","name":"addition","type":"bool"}],"name":"ControlVariableAdjustment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"DAO","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adjustment","outputs":[{"internalType":"bool","name":"add","type":"bool"},{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"target","type":"uint256"},{"internalType":"uint256","name":"buffer","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondCalculator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"bondInfo","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"},{"internalType":"uint256","name":"vesting","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"},{"internalType":"uint256","name":"pricePaid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPrice","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPriceInUSD","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtDecay","outputs":[{"internalType":"uint256","name":"decay_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtRatio","outputs":[{"internalType":"uint256","name":"debtRatio_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_maxPrice","type":"uint256"},{"internalType":"address","name":"_depositor","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_controlVariable","type":"uint256"},{"internalType":"uint256","name":"_vestingTerm","type":"uint256"},{"internalType":"uint256","name":"_minimumPrice","type":"uint256"},{"internalType":"uint256","name":"_maxPayout","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"uint256","name":"_maxDebt","type":"uint256"},{"internalType":"uint256","name":"_initialDebt","type":"uint256"}],"name":"initializeBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isLiquidityBond","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPayout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"payoutFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"pendingPayoutFor","outputs":[{"internalType":"uint256","name":"pendingPayout_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"percentVestedFor","outputs":[{"internalType":"uint256","name":"percentVested_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"policy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"principle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverLostToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_addition","type":"bool"},{"internalType":"uint256","name":"_increment","type":"uint256"},{"internalType":"uint256","name":"_target","type":"uint256"},{"internalType":"uint256","name":"_buffer","type":"uint256"}],"name":"setAdjustment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum OlympusBondDepository.PARAMETER","name":"_parameter","type":"uint8"},{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"setBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_staking","type":"address"},{"internalType":"bool","name":"_helper","type":"bool"}],"name":"setStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staking","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakingHelper","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"standardizedDebtRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"terms","outputs":[{"internalType":"uint256","name":"controlVariable","type":"uint256"},{"internalType":"uint256","name":"vestingTerm","type":"uint256"},{"internalType":"uint256","name":"minimumPrice","type":"uint256"},{"internalType":"uint256","name":"maxPayout","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"maxDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"useHelper","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

    FRAX_address = '0x8510c8c2B6891E04864fa196693D44E6B6ec2514'
    FRAX_abi = json.loads('[{"inputs":[{"internalType":"address","name":"_OHM","type":"address"},{"internalType":"address","name":"_principle","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_DAO","type":"address"},{"internalType":"address","name":"_bondCalculator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"deposit","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expires","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"}],"name":"BondCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"internalPrice","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"debtRatio","type":"uint256"}],"name":"BondPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"remaining","type":"uint256"}],"name":"BondRedeemed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"initialBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"adjustment","type":"uint256"},{"indexed":false,"internalType":"bool","name":"addition","type":"bool"}],"name":"ControlVariableAdjustment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"DAO","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adjustment","outputs":[{"internalType":"bool","name":"add","type":"bool"},{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"target","type":"uint256"},{"internalType":"uint256","name":"buffer","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondCalculator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"bondInfo","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"},{"internalType":"uint256","name":"vesting","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"},{"internalType":"uint256","name":"pricePaid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPrice","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPriceInUSD","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtDecay","outputs":[{"internalType":"uint256","name":"decay_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtRatio","outputs":[{"internalType":"uint256","name":"debtRatio_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_maxPrice","type":"uint256"},{"internalType":"address","name":"_depositor","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_controlVariable","type":"uint256"},{"internalType":"uint256","name":"_vestingTerm","type":"uint256"},{"internalType":"uint256","name":"_minimumPrice","type":"uint256"},{"internalType":"uint256","name":"_maxPayout","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"uint256","name":"_maxDebt","type":"uint256"},{"internalType":"uint256","name":"_initialDebt","type":"uint256"}],"name":"initializeBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isLiquidityBond","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPayout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"payoutFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"pendingPayoutFor","outputs":[{"internalType":"uint256","name":"pendingPayout_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"percentVestedFor","outputs":[{"internalType":"uint256","name":"percentVested_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"policy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"principle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverLostToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_addition","type":"bool"},{"internalType":"uint256","name":"_increment","type":"uint256"},{"internalType":"uint256","name":"_target","type":"uint256"},{"internalType":"uint256","name":"_buffer","type":"uint256"}],"name":"setAdjustment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum OlympusBondDepository.PARAMETER","name":"_parameter","type":"uint8"},{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"setBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_staking","type":"address"},{"internalType":"bool","name":"_helper","type":"bool"}],"name":"setStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staking","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakingHelper","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"standardizedDebtRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"terms","outputs":[{"internalType":"uint256","name":"controlVariable","type":"uint256"},{"internalType":"uint256","name":"vestingTerm","type":"uint256"},{"internalType":"uint256","name":"minimumPrice","type":"uint256"},{"internalType":"uint256","name":"maxPayout","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"maxDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"useHelper","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

    OHM_FRAX_address = '0xc20CffF07076858a7e642E396180EC390E5A02f7'
    OHM_FRAX_abi = json.loads('[{"inputs":[{"internalType":"address","name":"_OHM","type":"address"},{"internalType":"address","name":"_principle","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_DAO","type":"address"},{"internalType":"address","name":"_bondCalculator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"deposit","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expires","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"}],"name":"BondCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"priceInUSD","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"internalPrice","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"debtRatio","type":"uint256"}],"name":"BondPriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"remaining","type":"uint256"}],"name":"BondRedeemed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"initialBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBCV","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"adjustment","type":"uint256"},{"indexed":false,"internalType":"bool","name":"addition","type":"bool"}],"name":"ControlVariableAdjustment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"DAO","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"adjustment","outputs":[{"internalType":"bool","name":"add","type":"bool"},{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"target","type":"uint256"},{"internalType":"uint256","name":"buffer","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondCalculator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"bondInfo","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"},{"internalType":"uint256","name":"vesting","type":"uint256"},{"internalType":"uint256","name":"lastBlock","type":"uint256"},{"internalType":"uint256","name":"pricePaid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPrice","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondPriceInUSD","outputs":[{"internalType":"uint256","name":"price_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtDecay","outputs":[{"internalType":"uint256","name":"decay_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debtRatio","outputs":[{"internalType":"uint256","name":"debtRatio_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_maxPrice","type":"uint256"},{"internalType":"address","name":"_depositor","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_controlVariable","type":"uint256"},{"internalType":"uint256","name":"_vestingTerm","type":"uint256"},{"internalType":"uint256","name":"_minimumPrice","type":"uint256"},{"internalType":"uint256","name":"_maxPayout","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"uint256","name":"_maxDebt","type":"uint256"},{"internalType":"uint256","name":"_initialDebt","type":"uint256"}],"name":"initializeBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isLiquidityBond","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDecay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxPayout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"payoutFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"pendingPayoutFor","outputs":[{"internalType":"uint256","name":"pendingPayout_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_depositor","type":"address"}],"name":"percentVestedFor","outputs":[{"internalType":"uint256","name":"percentVested_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"policy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"principle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"recoverLostToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"bool","name":"_stake","type":"bool"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_addition","type":"bool"},{"internalType":"uint256","name":"_increment","type":"uint256"},{"internalType":"uint256","name":"_target","type":"uint256"},{"internalType":"uint256","name":"_buffer","type":"uint256"}],"name":"setAdjustment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum OlympusBondDepository.PARAMETER","name":"_parameter","type":"uint8"},{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"setBondTerms","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_staking","type":"address"},{"internalType":"bool","name":"_helper","type":"bool"}],"name":"setStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staking","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakingHelper","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"standardizedDebtRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"terms","outputs":[{"internalType":"uint256","name":"controlVariable","type":"uint256"},{"internalType":"uint256","name":"vestingTerm","type":"uint256"},{"internalType":"uint256","name":"minimumPrice","type":"uint256"},{"internalType":"uint256","name":"maxPayout","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"maxDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDebt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"useHelper","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]')

    OHM = web3.eth.contract(address=OHM_address, abi=OHM_abi)
    DAI = web3.eth.contract(address=DAI_address, abi=DAI_abi)
    OHM_DAI = web3.eth.contract(address=OHM_DAI_address, abi=OHM_DAI_abi)
    FRAX = web3.eth.contract(address=FRAX_address, abi=FRAX_abi)
    OHM_FRAX = web3.eth.contract(address=OHM_FRAX_address, abi=OHM_FRAX_abi)


    print('Bonds:')

    OHM_DAI_price = web3.fromWei(OHM_DAI.functions.bondPriceInUSD().call(), 'ether')
    OHM_DAI_max = float(OHM_price) * OHM_DAI.functions.maxPayout().call()/1e9
    print(f'1. OHM_DAI: {OHM_DAI_price:,.2f}')
    print(f'   Discount: {(100 * (OHM_price - OHM_DAI_price)/OHM_price):,.2f} %')
    OHM_DAI_disc = (OHM_price - OHM_DAI_price) / OHM_price

    DAI_price = web3.fromWei(DAI.functions.bondPriceInUSD().call(), 'ether')
    DAI_max = float(OHM_price) * DAI.functions.maxPayout().call()/1e9
    print(f'2. DAI: {DAI_price:,.2f}')
    print(f'   Discount: {(100 * (OHM_price - DAI_price)/OHM_price):,.2f} %')
    DAI_disc = (OHM_price - DAI_price) / OHM_price

    FRAX_price = web3.fromWei(FRAX.functions.bondPriceInUSD().call(), 'ether')
    FRAX_max = float(OHM_price) * FRAX.functions.maxPayout().call()/1e9
    print(f'3. FRAX: {FRAX_price:,.2f}')
    print(f'   Discount: {(100 *(OHM_price - FRAX_price)/OHM_price):,.2f} %')
    FRAX_disc = (OHM_price - FRAX_price)/OHM_price

    OHM_FRAX_price = web3.fromWei(OHM_FRAX.functions.bondPriceInUSD().call(), 'ether')
    OHM_FRAX_max = float(OHM_price) * OHM_FRAX.functions.maxPayout().call()/1e9
    print(f'4. OHM_FRAX: {OHM_FRAX_price:,.2f}')
    print(f'   Discount: {(100 *(OHM_price - OHM_FRAX_price)/OHM_price):,.2f} %')
    OHM_FRAX_disc = (OHM_price - OHM_FRAX_price)/OHM_price


    #retrieve staking rewards and calculate 5 day ROI
    distrib_address = Web3.toChecksumAddress('0xfd31c7d00ca47653c6ce64af53c1571f9c36566a')
    distrib_abi = json.loads('[{"inputs":[{"internalType":"address","name":"_OHM","type":"address"},{"internalType":"address","name":"_sOHM","type":"address"},{"internalType":"uint256","name":"_epochLength","type":"uint256"},{"internalType":"uint256","name":"_firstEpochNumber","type":"uint256"},{"internalType":"uint256","name":"_firstEpochBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"OHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"distributor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"epoch","outputs":[{"internalType":"uint256","name":"length","type":"uint256"},{"internalType":"uint256","name":"number","type":"uint256"},{"internalType":"uint256","name":"endBlock","type":"uint256"},{"internalType":"uint256","name":"distribute","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forfeit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"giveLockBonus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"index","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"locker","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rebase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"returnLockBonus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sOHM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum OlympusStaking.CONTRACTS","name":"_contract","type":"uint8"},{"internalType":"address","name":"_address","type":"address"}],"name":"setContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_warmupPeriod","type":"uint256"}],"name":"setWarmup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"stake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"toggleDepositLock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_trigger","type":"bool"}],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"warmupContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"warmupInfo","outputs":[{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"uint256","name":"gons","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"bool","name":"lock","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"warmupPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]')
    distrib = web3.eth.contract(address = distrib_address, abi = distrib_abi)
    distrib_info = distrib.functions.epoch().call()
    rewards = distrib_info[3]

    sOHM_address = Web3.toChecksumAddress('0x04f2694c8fcee23e8fd0dfea1d4f5bb8c352111f')
    sOHM_abi = json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rebase","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"LogRebase","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"stakingContract","type":"address"}],"name":"LogStakingContractUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"LogSupply","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INDEX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner_","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"gons","type":"uint256"}],"name":"balanceForGons","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"who","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"circulatingSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"gonsForBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"index","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakingContract_","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initializer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"profit_","type":"uint256"},{"internalType":"uint256","name":"epoch_","type":"uint256"}],"name":"rebase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rebases","outputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"rebase","type":"uint256"},{"internalType":"uint256","name":"totalStakedBefore","type":"uint256"},{"internalType":"uint256","name":"totalStakedAfter","type":"uint256"},{"internalType":"uint256","name":"amountRebased","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"blockNumberOccured","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_INDEX","type":"uint256"}],"name":"setIndex","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stakingContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]')
    sOHM = web3.eth.contract(address = sOHM_address, abi = sOHM_abi)
    circ_supply = sOHM.functions.circulatingSupply().call()

    print("Staking:")
    print(f'   Next epoch rewards: {(100*rewards/circ_supply):,.2f} %')
    print(f'   5 days ROI: {(100 * (1+rewards/circ_supply)**float(15)-100):,.2f} %')
    print('\n')
    rebase = rewards/circ_supply
    staking_rewards = (1+rewards/circ_supply)**float(15)-1  

    return(DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price)

def calc_break_even(rebase, staking_rewards, gas_price, eth_price, bond_disc, max_pay):
    st_gas = gas_price * eth_price * 150209 / 1e9
    bond_gas = gas_price * eth_price * 254633 / 1e9
    min_usd_day = (st_gas*5+bond_gas) / ((((1+rebase))*(1-(1+rebase)**15)/(1-(1+rebase)**3))/5 - 1 - staking_rewards + float(bond_disc))
    min_usd_all = (st_gas*15+bond_gas) / ((((1+rebase))*(1-(1+rebase)**15)/(1-(1+rebase)))/15 - 1 - staking_rewards + float(bond_disc))
    
    if min_usd_day <= min_usd_all:
        if min_usd_day < 0 or min_usd_day < max_pay:
            return(':no_entry:', '\u200b', '\u200b')
        else:
            return(':white_check_mark:', min_usd_day, "Daily")
    else:
        if min_usd_all < 0 or min_usd_all < max_pay:
            return(':no_entry:', '\u200b', '\u200b')
        else:
            return(':white_check_mark:', min_usd_all, "Every epoch")

def calc_returns(gas_price, eth_price, bond_disc, amount, staking_rewards, rebase):
    print(bond_disc, rebase)
    st_gas = gas_price * eth_price * 150209 / 1e9
    bond_gas = gas_price * eth_price * 254633 / 1e9
    bond_returns_day = ((((1+rebase))*(1-(1+rebase)**15)/(1-(1+rebase)**3))/5 + float(bond_disc)) * float(amount) - (st_gas*5+bond_gas)
    bond_returns_all = ((((1+rebase))*(1-(1+rebase)**15)/(1-(1+rebase)))/15 + float(bond_disc)) * float(amount) - (st_gas*15+bond_gas)

    if bond_returns_day >= bond_returns_all:
        roi = 100 * bond_returns_day/float(amount) - 100
        if roi < staking_rewards * 100:
            return(bond_returns_day, roi, "Daily", ':no_entry:')
        else:
            return(bond_returns_day, roi, "Daily", ':white_check_mark:')
    else:
        roi = 100 * bond_returns_all/float(amount) - 100
        if roi < staking_rewards * 100:
            return(bond_returns_all, roi, "Every epoch", ':no_entry:')
        else:
            return(bond_returns_all, roi, "Every epoch", ':white_check_mark:')

@client.event
async def on_ready():
    print('Logged in as {0.user}'.format(client))
    if not check_discounts.is_running():
        check_discounts.start()

@tasks.loop(seconds = 60)
async def check_discounts():
    global DAI_alert, OHM_DAI_alert, FRAX_alert, OHM_FRAX_alert
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    channel = await client.fetch_channel('864398537403400246')

    if staking_rewards <= DAI_disc and DAI_alert == False:
        await channel.send(f'<@&864398537403400246> Big discount for DAI bonds! DAI bonds currently have a **{100 * DAI_disc:,.2f}% discount**, which is greater than the 5 day ROI for staking ({100 * staking_rewards:,.2f}%')
        DAI_alert = True
    elif staking_rewards > DAI_disc and DAI_alert == True:
        DAI_alert = False

    if staking_rewards < OHM_DAI_disc and OHM_DAI_alert == False:
        OHM_DAI_alert = True
        await channel.send(f'<@&864398537403400246> Big discount for OHM-DAI bonds! OHM-DAI bonds currently have a **{100 * OHM_DAI_disc:,.2f}% discount**, which is greater than the 5 day ROI for staking ({100 * staking_rewards:,.2f}%')
    elif staking_rewards > OHM_DAI_disc and OHM_DAI_alert == True:
        OHM_DAI_alert = False
        
    if staking_rewards < FRAX_disc and FRAX_alert == False:
        FRAX_alert = True
        await channel.send(f'<@&864398537403400246> Big discount for FRAX bonds! FRAX bonds currently have a **{100 * FRAX_disc:,.2f}% discount**, which is greater than the 5 day ROI for staking ({100 * staking_rewards:,.2f}%')
    elif staking_rewards > FRAX_disc and FRAX_alert == True:
        FRAX_alert = False

    if staking_rewards < OHM_FRAX_disc and OHM_FRAX_alert == False:
        OHM_FRAX_alert = True
        await channel.send(f'<@&864398537403400246> Big discount for OHM-FRAX bonds! OHM-FRAX bonds currently have a **{100 * OHM_FRAX_disc:,.2f}% discount**, which is greater than the 5 day ROI for staking ({100 * staking_rewards:,.2f}%')
    elif staking_rewards > OHM_FRAX_disc and OHM_FRAX_alert == True:
        OHM_FRAX_alert = False


    urows = db.records("SELECT DISTINCT UserID FROM bond_alerts")
    if len(urows) > 0:
        for (user_id,) in urows:
            fields = []
            user_discount = False
            print(user_id)
            rows = db.records("SELECT DISTINCT Bond, Discount, Gas, Active FROM bond_alerts WHERE UserID = ?", int(user_id))
            for (bond, discount, max_gas, is_active) in rows:
                    if bond == 'DAI':
                        if is_active == 0 and discount <= 100 * DAI_disc and gas_price <= max_gas:
                            user_discount = True
                            is_worth, min_usd, strategy = calc_break_even(rebase, staking_rewards, gas_price, eth_price, DAI_disc, DAI_max)
                            fields = fields + [(f'Bond Type:', f' {bond}', True), (f'Current Bond Price:', f' ${DAI_price:,.2f}', True),
                            ('Discount:', f' {100*DAI_disc:,.2f}%', True), ('Can be profitable?:', is_worth, True), ("Best Strategy", 'Stake ' + strategy, True), ("Size for breakeven", f'${min_usd:,.2f}', True), ("Max payout", f'${DAI_max:,.2f}', True)]
                            db.execute("UPDATE bond_alerts SET Active = 1 WHERE UserID = ? AND Bond = ? AND Discount = ? AND Gas = ?", user_id, bond, discount, max_gas)
                            db.save()
                            print(f'Alert sent to {user_id} for {bond} at more than {discount}% discount')
                            print(fields)
                        elif is_active == 1 and discount > 100 * DAI_disc:
                            db.execute("UPDATE bond_alerts SET Active = 0 WHERE AlertID = ?", str(user_id) + bond + str(discount))
                            db.save()
                            print(f'Alert reseted for {bond} at more than {discount}% discount')

                    elif bond == 'OHM-DAI':
                        if is_active == 0 and discount <= 100 * OHM_DAI_disc and gas_price <= max_gas:
                            user_discount = True
                            is_worth, min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_DAI_disc, OHM_DAI_max)
                            fields = fields + [(f'Bond Type:', f' {bond}', True), (f'Current Bond Price:', f' ${OHM_DAI_price:,.2f}', True),
                            ('Discount:', f' {100*OHM_DAI_disc:,.2f}%', True), ('Can be profitable?:', is_worth, True), ("Size for breakeven", f'${min_usd:,.2f}', True), ("Max payout", f'${OHM_DAI_max:,.2f}', True)]
                            db.execute("UPDATE bond_alerts SET Active = 1 WHERE UserID = ? AND Bond = ? AND Discount = ? AND Gas = ?", user_id, bond, discount, max_gas)
                            db.save()
                            print(f'Alert sent to {user_id} for {bond} at more than {discount}% discount')
                            print(fields)
                        elif is_active == 1 and discount > 100 * OHM_DAI_disc:
                            db.execute("UPDATE bond_alerts SET Active = 0 WHERE AlertID = ?", str(user_id) + bond + str(discount))
                            db.save()
                            print(f'Alert reseted for {bond} at more than {discount}% discount')

                    elif bond == 'FRAX':
                        if is_active == 0 and discount < 100 * FRAX_disc and gas_price <= max_gas:
                            user_discount = True
                            is_worth, min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, FRAX_disc, FRAX_max)
                            fields = fields + [(f'Bond Type:', f' {bond}', True), (f'Current Bond Price:', f' ${FRAX_price:,.2f}', True),
                            ('Discount:', f' {100*FRAX_disc:,.2f}%', True), ('Can be profitable?:', is_worth, True), ("Size for breakeven", f'${min_usd:,.2f}', True), ("Max payout", f'${FRAX_max:,.2f}', True)]
                            db.execute("UPDATE bond_alerts SET Active = 1 WHERE UserID = ? AND Bond = ? AND Discount = ? AND Gas = ?", user_id, bond, discount, max_gas)
                            db.save()
                            print(f'Alert sent to {user_id} for {bond} at more than {discount}% discount')
                        elif is_active == 1 and discount > 100 * FRAX_disc:
                            db.execute("UPDATE bond_alerts SET Active = 0 WHERE AlertID = ?", str(user_id) + bond + str(discount))
                            db.save()
                            print(f'Alert reseted for {bond} at more than {discount}% discount')

                    elif bond == 'OHM-FRAX':
                        if is_active == 0 and discount < 100 * OHM_FRAX_disc and gas_price <= max_gas:
                            user_discount = True
                            is_worth, min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_FRAX_disc, OHM_FRAX_max)
                            fields = fields + [(f'Bond Type:', f' {bond}', True), (f'Current Bond Price:', f' ${OHM_FRAX_price:,.2f}', True),
                            ('Discount:', f' {100*OHM_FRAX_disc:,.2f}%', True), ('Can be profitable?:', is_worth, True), ("Size for breakeven", f'${min_usd:,.2f}', True), ("Max payout", f'${OHM_FRAX_max:,.2f}', True)]
                            db.execute("UPDATE bond_alerts SET Active = 1 WHERE UserID = ? AND Bond = ? AND Discount = ? AND Gas = ?", user_id, bond, discount, max_gas)
                            db.save()
                            print(f'Alert sent to {user_id} for {bond} at more than {discount}% discount')
                        elif is_active == 1 and discount > 100 * OHM_FRAX_disc:
                            db.execute("UPDATE bond_alerts SET Active = 0 WHERE AlertID = ?", str(user_id) + bond + str(discount))
                            db.save()
                            print(f'Alert reseted for {bond} at more than {discount}% discount')

            if user_discount == True:
                embed = discord.Embed(title = f'Big Bond Discount!', description = f':small_blue_diamond: Current **OHM** Price is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** \n :small_blue_diamond: Some of your alert thresholds have been reached by current bond discounts', colour=0xFFFFFF)
                for name, value, inline in fields:
                    embed.add_field(name=name, value=value, inline=inline)
                user = client.get_user(user_id)
                embed.set_footer(text = 'This alert is courtesy of your ohmie @0xRusowsky')
                await user.send(embed=embed)
            else:
                print('No alerts to report')
                pass


@client.command(pass_content=True)
async def all_bonds(ctx):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    DAI_worth, DAI_min_usd, DAI_strategy = calc_break_even(rebase, staking_rewards, gas_price, eth_price, DAI_disc, DAI_max)
    OHM_DAI_worth, OHM_DAI_min_usd, OHM_DAI_strategy  = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_DAI_disc, OHM_DAI_max)
    FRAX_worth, FRAX_min_usd, FRAX_strategy  = calc_break_even(rebase, staking_rewards, gas_price, eth_price, FRAX_disc, FRAX_max)
    OHM_FRAX_worth, OHM_FRAX_min_usd, OHM_FRAX_strategy  = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_FRAX_disc, OHM_FRAX_max)

    embed = discord.Embed(title = "Current Bond Discounts", description = f':small_blue_diamond: 5 day ROI for **staking** sits at **{100 * staking_rewards:,.2f}%** \n :small_blue_diamond: **OHM** price (OHM-DAI pool on Sushi) is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** ', colour=0xFFFFFF)
    fields = [("DAI bond price", f'${DAI_price:,.2f}', True),
            ("DAI bond discount", f'{100 * DAI_disc:,.2f}%', True), ("Max payout", f'${DAI_max:,.2f}', True), ('Can be profitable?:', DAI_worth, True), ('Best Strategy:', '\u200b' if DAI_strategy == '\u200b' else "Stake " + DAI_strategy, True), ("Size for breakeven", DAI_min_usd if isinstance(DAI_min_usd, str) else f'${DAI_min_usd:,.2f}', True),
            ("OHM-DAI bond price", f'${OHM_DAI_price:,.2f}', True),
            ("OHM-DAI bond discount", f'{100 * OHM_DAI_disc:,.2f}%', True), ("Max payout", f'${OHM_DAI_max:,.2f}', True), ('Can be profitable?:', OHM_DAI_worth, True), ('Best Strategy:', '\u200b' if OHM_DAI_strategy == '\u200b' else "Stake " + OHM_DAI_strategy, True), ("Size for breakeven", OHM_DAI_min_usd if isinstance(OHM_DAI_min_usd, str) else f'${OHM_DAI_min_usd:,.2f}', True),
            ("FRAX bond price", f'${FRAX_price:,.2f}', True),
            ("FRAX bond discount", f'{100 * FRAX_disc:,.2f}%', True), ("Max payout", f'${FRAX_max:,.2f}', True), ('Can be profitable?:', FRAX_worth, True), ('Best Strategy:', '\u200b' if FRAX_strategy == '\u200b' else "Stake " + FRAX_strategy, True), ("Size for breakeven", FRAX_min_usd if isinstance(FRAX_min_usd, str) else f'${FRAX_min_usd:,.2f}', True),
            ("OHM-FRAX bond price", f'${OHM_FRAX_price:,.2f}', True),
            ("OHM-FRAX bond discount", f'{100 * OHM_FRAX_disc:,.2f}%', True), ("Max payout", f'${OHM_FRAX_max:,.2f}', True), ('Can be profitable?:', OHM_FRAX_worth, True), ('Best Strategy:', '\u200b' if OHM_FRAX_strategy == '\u200b' else "Stake " + OHM_FRAX_strategy, True), ("Size for breakeven", OHM_FRAX_min_usd if isinstance(OHM_FRAX_min_usd, str) else f'${OHM_FRAX_min_usd:,.2f}', True)]
    for name, value, inline in fields:
        embed.add_field(name=name, value=value, inline=inline)
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def DAI_bond(ctx):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    DAI_worth, DAI_min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, DAI_disc)
    embed = discord.Embed(title = "Current Bond Discounts", description = f':small_blue_diamond: 5 day ROI for **staking** sits at **{100 * staking_rewards:,.2f}%** \n :small_blue_diamond: *OHM** price (OHM-DAI pool on Sushi) is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** ', colour=0xFFFFFF)
    fields = [("DAI bond price", f'${DAI_price:,.2f}', True), ("DAI bond discount", f'{100 * DAI_disc:,.2f}%', True), ("Max payout", f'${DAI_max:,.2f}', True), ('Can be profitable?:', DAI_worth, True), ("Size for breakeven", DAI_min_usd if isinstance(DAI_min_usd, str) else f'${DAI_min_usd:,.2f}', True), ('\u200b', '\u200b', True)]
    for name, value, inline in fields:
        embed.add_field(name=name, value=value, inline=inline)
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def OHMDAI_bond(ctx):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    OHM_DAI_worth, OHM_DAI_min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_DAI_disc)
    embed = discord.Embed(title = "Current Bond Discounts", description = f':small_blue_diamond: 5 day ROI for **staking** sits at **{100 * staking_rewards:,.2f}%** \n :small_blue_diamond: *OHM** price (OHM-DAI pool on Sushi) is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** ', colour=0xFFFFFF)
    fields = [("OHM-DAI bond price", f'${OHM_DAI_price:,.2f}', True), ("OHM-DAI bond discount", f'{100 * OHM_DAI_disc:,.2f}%', True), ("Max payout", f'${OHM_DAI_max:,.2f}', True), ('Can be profitable?:', OHM_DAI_worth, True), ("Size for breakeven", OHM_DAI_min_usd if isinstance(OHM_DAI_min_usd, str) else f'${OHM_DAI_min_usd:,.2f}', True), ('\u200b', '\u200b', True)]
    for name, value, inline in fields:
        embed.add_field(name=name, value=value, inline=inline)
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def FRAX_bond(ctx):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    FRAX_worth, FRAX_min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, FRAX_disc)
    embed = discord.Embed(title = "Current Bond Discounts", description = f':small_blue_diamond: 5 day ROI for **staking** sits at **{100 * staking_rewards:,.2f}%** \n :small_blue_diamond: *OHM** price (OHM-DAI pool on Sushi) is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** ', colour=0xFFFFFF)
    fields = [("FRAX bond price", f'${FRAX_price:,.2f}', True), ("FRAX bond discount", f'{100 * FRAX_disc:,.2f}%', True), ("Max payout", f'${FRAX_max:,.2f}', True), ('Can be profitable?:', FRAX_worth, True), ("Size for breakeven", FRAX_min_usd if isinstance(FRAX_min_usd, str) else f'${FRAX_min_usd:,.2f}', True), ('\u200b', '\u200b', True)]
    for name, value, inline in fields:
        embed.add_field(name=name, value=value, inline=inline)
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def OHMFRAX_bond(ctx):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    OHM_FRAX_worth, OHM_FRAX_min_usd = calc_break_even(rebase, staking_rewards, gas_price, eth_price, OHM_FRAX_disc)
    embed = discord.Embed(title = "Current Bond Discounts", description = f':small_blue_diamond: 5 day ROI for **staking** sits at **{100 * staking_rewards:,.2f}%** \n :small_blue_diamond: *OHM** price (OHM-DAI pool on Sushi) is **${OHM_price:,.2f}** \n :small_blue_diamond: Current **gas** prices for standard txs are around **{gas_price:,.0f} gwei** ', colour=0xFFFFFF)
    fields = [("OHM-FRAX bond price", f'${OHM_FRAX_price:,.2f}', True), ("OHM-FRAX bond discount", f'{100 * OHM_FRAX_disc:,.2f}%', True), ("Max payout", f'${OHM_FRAX_max:,.2f}', True), ('Can be profitable?:', OHM_FRAX_worth, True), ("Size for breakeven", OHM_FRAX_min_usd if isinstance(OHM_FRAX_min_usd, str) else f'${OHM_FRAX_min_usd:,.2f}', True), ('\u200b', '\u200b', True)]
    for name, value, inline in fields:
        embed.add_field(name=name, value=value, inline=inline)
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def bond_calc(ctx, bond, amount, discount_in=100.0, gas=1000.0):
    DAI_price, DAI_disc, DAI_max, OHM_DAI_disc, OHM_DAI_price, OHM_DAI_max, FRAX_disc, FRAX_price, FRAX_max, OHM_FRAX_disc, OHM_FRAX_price, OHM_FRAX_max, staking_rewards, rebase, OHM_price, gas_price, eth_price = get_prices()
    bond_list = ['DAI', 'OHM-DAI', 'FRAX', 'OHM-FRAX']
    bond = bond.upper()
    if gas == 1000.0:
        gas = gas_price
    if bond not in bond_list:
        embed = discord.Embed(title = "Input Error", description = f"Incorrect bond type: **{bond}**. \n  The input value for a bond must be within the following: **{bond_list}** ", colour=0xd14d4d)
        await ctx.send(embed=embed)
    elif is_num(discount_in) == False:
        embed = discord.Embed(title = "Input Error", description = f'Incorrect amount value: **{amount}**. \n The amount value must be a number (int or float).', colour=0xd14d4d)
        await ctx.send(embed=embed)
    elif is_num(gas) == False:
        embed = discord.Embed(title = "Input Error", description = f'Incorrect max_gas value: **{gas}**. \n The max_gas value must be an integer.', colour=0xd14d4d)
        await ctx.send(embed=embed)
    elif is_num(amount) and is_num(gas):
        if bond == "DAI":
            discount = DAI_disc
            max_pay = DAI_max
        elif bond == "OHM-DAI":
            discount = OHM_DAI_disc
            max_pay = OHM_DAI_max
        elif bond == "FRAX":
            discount = FRAX_disc
            max_pay = FRAX_max
        elif bond == "OHM-FRAX":
            discount = OHM_FRAX_disc
            max_pay = OHM_FRAX_max
        else:
            discount = ETH_disc
            max_pay = ETH_max
        if discount_in != 100.0:
            discount = discount_in/100

        if float(amount) > max_pay:
            embed = discord.Embed(title = "Calculation Error", description = f'The input **amount** is **greater** than the **max payout** for **{bond}** bonds!', colour=0xd14d4d)
            await ctx.send(embed=embed)
        else:
            returns, roi, best, is_worth = calc_returns(gas, eth_price, discount, amount, staking_rewards, rebase)
            embed = discord.Embed(title = "Expected Returns", description = f'Expected outcome for a **${float(amount):,.2f} {bond}** bond, at **{float(100*discount):,.2f}% discount** and a **gas** price of **{float(gas):,.0f} gwei** with a **max payout** of **${float(max_pay):,.2f}**', colour=0xFFFFFF)
            embed.add_field(name=f'Better than staking?', value=is_worth, inline=True)
            embed.add_field(name=f'USD Returns', value=f'${returns:,.2f}', inline=True)
            embed.add_field(name=f'ROI', value=f'{roi:,.2f}%', inline=True)
            embed.add_field(name=f'Best strategy', value='Stake ' + best, inline=True)
            await ctx.send(embed=embed)


@client.command(pass_content=True)
async def create_alert(ctx, bond, discount, gas=1000.0):
    bond_list = ['DAI', 'OHM-DAI', 'FRAX', 'OHM-FRAX']
    bond = bond.upper()
    if discount[-1] == '%':
        discount = discount[0:len(discount)-1]

    if bond not in bond_list:
        embed = discord.Embed(title = "Configuration Error", description = f"Incorrect bond type: **{bond}**. \n  The input value for a bond must be within the following: *{bond_list}** ", colour=0xd14d4d)
        await ctx.send(embed=embed)
    elif is_num(discount) and is_num(gas):
        alert_id = db.record("SELECT AlertID FROM bond_alerts WHERE UserID = ? AND Bond = ? AND Discount=?", ctx.author.id, bond, discount)
        if alert_id is None:
            if len(db.records("SELECT * FROM bond_alerts WHERE UserID = ?", ctx.author.id)) == 5:
                embed = discord.Embed(title = "Configuration Error", description = f"{ctx.author.mention} already had 5 alerts configured. Don't be greedy sir! :zany_face: ", colour=0xd14d4d)
                await ctx.send(embed=embed)
            else:
                db.execute("INSERT INTO bond_alerts VALUES (?,?,?,?,?,0)", str(ctx.author.id) + bond + str(discount), ctx.author.id, bond, discount, int(gas))
                db.save()
                embed = discord.Embed(title = "New Bond Alert Configured", description = f'{ctx.author.mention} has created a new alert for discounts over {discount}% on {bond} bonds when gas prices are below {int(gas)} gwei!', colour=0x5fe3a6)
                await ctx.send(embed=embed)
        else:
            embed = discord.Embed(title = "Bond Alert Already Configured", description = f'{ctx.author.mention} already had an alert for discounts over {discount}% on {bond} bonds.', colour=0xd14d4d)
            await ctx.send(embed=embed)
    elif is_num(discount) == False:
        embed = discord.Embed(title = "Configuration Error", description = f'Incorrect discount value: **{discount}**. \n The discount value must be a number (int or float).', colour=0xd14d4d)
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title = "Configuration Error", description = f'Incorrect max_gas value: **{gas}**. \n The max_gas value must be a number (int or float).', colour=0xd14d4d)
        await ctx.send(embed=embed)

@client.command(pass_content=True)
async def delete_alert(ctx, bond, discount):
    bond = bond.upper()
    if discount[-1] == '%':
        discount = discount[0:len(discount)-1]
    alert_id = db.record("SELECT AlertID FROM bond_alerts WHERE UserID = ? AND Bond = ? AND Discount=?", ctx.author.id, bond, discount)
    print(alert_id)
    if alert_id is not None:
        db.execute("DELETE FROM bond_alerts WHERE AlertID = ?", str(ctx.author.id) + bond + str(discount))
        db.save()
        embed = discord.Embed(title = "Bond Alert Deleted", description = f'{ctx.author.mention} has deleted an alert for discounts over {discount}% on {bond} bonds!', colour=0xe3a334)
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title = "Alert Doesn't Exist", description = f'{ctx.author.mention} does not have any alerts for discounts over {discount}% on {bond} bonds.', colour=0xd14d4d)
        await ctx.send(embed=embed)

@client.command(pass_content=True)
async def delete_all(ctx):
    alert_id = db.record("SELECT AlertID FROM bond_alerts WHERE UserID = ?", ctx.author.id)
    print(alert_id)
    if alert_id is not None:
        db.execute("DELETE FROM bond_alerts WHERE UserID = ?", ctx.author.id)
        db.save()
        embed = discord.Embed(title = "Delete All Bond Alerts", description = f'{ctx.author.mention} has deleted all bond alerts!', colour=0xe3a334)
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title = "No Alerts Configured", description = f'{ctx.author.mention} does not have any configured alerts.', colour=0xd14d4d)
        await ctx.send(embed=embed)

@client.command(pass_content=True)
async def my_alerts(ctx):
    alert_id = db.record("SELECT AlertID FROM bond_alerts WHERE UserID = ?", ctx.author.id)
    print(alert_id)
    if alert_id is None:
        embed = discord.Embed(title = "No Alerts", description = f'{ctx.author.mention} has not configured any alerts yet.', colour=0xFFFFFF)
        await ctx.send(embed=embed)
    else:
        rows = db.records("SELECT Bond, Discount, Gas FROM bond_alerts WHERE UserID = ?", ctx.author.id)
        embed = discord.Embed(title = f'Configured Alerts for {ctx.author}', description='You will receive an alert when a bond discount matches any the following criteria.', colour=0xFFFFFF)
        for (bond, discount, max_gas) in rows:
            embed.add_field(name=f'Bond Type:', value=f'{bond}', inline=True)
            embed.add_field(name=f'Discount:', value=f'{discount}%', inline=True)
            embed.add_field(name=f'Max Gas:', value=f'{max_gas} gwei', inline=True)
        
        await ctx.send(embed=embed)

@client.command(pass_content=True)
async def info(ctx):
    embed = discord.Embed(title = f'Bot Information', description='Here you can see an explanation on how the different calculations are performed. You will also be informed of the made assumptions.', colour=0xFFFFFF)
    embed.add_field(name=f'Information source:', value=':small_blue_diamond: __ETH price:__ from coingecko API \n :small_blue_diamond: __Gas price:__ estimated by the web3.py library \n :small_blue_diamond: __OHM price:__ from the OHM-DAI pool on sushiswap \n :small_blue_diamond: __Bond price:__ from the bond contract \n :small_blue_diamond: __Bond max payout:__ from the bond contract*', inline=False)
    embed.add_field(name=f'Assumptions:', value=':small_blue_diamond: __Size for breakeven__: assumes that OHM, ETH and gas prices will remain constant during the 5 day vesting period. Also assumes that the user will claim + stake once a day*', inline=False)
    embed.add_field(name=f'Calculations:', value=':small_blue_diamond: Bond max payout (USD) = maxPayout (%) · circulatingSupply (OHM) · OHM price (USD/OHM) \n  :small_blue_diamond: Size for breakeven (USD) = (5 · stakingGas + bondingGas) / [((1+rebase) · (1-(1+rebase)^15) / (1-(1+rebase)^3)) / 5 - 1 - stakingRewards + bondDiscount]', inline=False)
    
    await ctx.send(embed=embed)

@client.command(pass_content=True)
async def help(ctx):
    embed = discord.Embed(title = f'Help Panel', description='Here you can see a list with all the Bond Bot commands and a brief explanation on how to use them.', colour=0xFFFFFF)
    embed.add_field(name=f':small_blue_diamond: .all_bonds', value='Returns a list with all the live information for every bond type.', inline=False)
    embed.add_field(name=f':small_blue_diamond: .DAI_bonds', value='Returns live information for DAI bonds.', inline=False)
    embed.add_field(name=f':small_blue_diamond: .OHMDAI_bonds', value='Returns live information for OHM-DAI bonds.', inline=False)
    embed.add_field(name=f':small_blue_diamond: .FRAX_bonds', value='Returns live information for FRAX bonds.', inline=False)
    embed.add_field(name=f':small_blue_diamond: .OHMFRAX_bonds', value='Returns live information for OHM-FRAX bonds.', inline=False)
    embed.add_field(name=f':small_orange_diamond: .my_alerts', value='Returns a list with all the alerts that the user has.', inline=False)
    embed.add_field(name=f':small_orange_diamond: .create_alert   bond_type   discount_value   (max_gas)', value='Creates a new alert that will be triggered when bond discounts are greater than *discount_value* and gas prices are lower than *max_gas*. \n :black_small_square: **bond_type:**  *must be in (DAI, OHM-DAI, FRAX, OHM-FRAX)* \n :black_small_square: **discount_value:**  *XX.XX (number expressed in %)* \n :black_small_square: **max_gas:**  *XX gwei (must be integer)*', inline=False)
    embed.add_field(name=f':small_orange_diamond: .delete_all', value='Deletes all the alerts that the user previously configured.', inline=False)
    embed.add_field(name=f':small_orange_diamond: .delete_alert   bond_type   discount_value', value='Deletes an existing bond alert. \n :black_small_square: **bond_type:**  *must be in (DAI, OHM-DAI, FRAX, OHM-FRAX)* \n :black_small_square: **discount_value:**  *XX.XX (number expressed in %)*', inline=False)
    embed.add_field(name=f':pushpin: .info', value='Explains the logic behind the performed calculations for the alerts.', inline=False)
    
    embed.set_footer(text = 'If you have any ideas or improvement suggestions please DM your ohmie @0xRusowsky')
    await ctx.send(embed=embed)

client.run(BOT_TOKEN)
